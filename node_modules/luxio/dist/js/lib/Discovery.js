'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _require = require('../config'),
    nupnpAddress = _require.nupnpAddress,
    apAddress = _require.apAddress,
    minimumVersion = _require.minimumVersion;

var _require2 = require('../util'),
    fetch = _require2.fetch;

var Device = require('./Device.js');

var Discovery = function () {
	function Discovery() {
		_classCallCheck(this, Discovery);
	}

	_createClass(Discovery, [{
		key: 'getDevices',
		value: function () {
			var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
				var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
				    _ref2$ap = _ref2.ap,
				    ap = _ref2$ap === undefined ? true : _ref2$ap,
				    _ref2$nupnp = _ref2.nupnp,
				    nupnp = _ref2$nupnp === undefined ? true : _ref2$nupnp;

				var fns, deviceIds;
				return regeneratorRuntime.wrap(function _callee$(_context) {
					while (1) {
						switch (_context.prev = _context.next) {
							case 0:
								fns = [];

								if (ap) fns.push(this.getAPDevices());
								if (nupnp) fns.push(this.getNupnpDevices());

								deviceIds = [];
								return _context.abrupt('return', Promise.all(fns).then(function (results) {
									var _ref3;

									return (_ref3 = []).concat.apply(_ref3, _toConsumableArray(results)).filter(function (device) {
										if (deviceIds.includes(device.id)) return false;
										deviceIds.push(device.id);
										return true;
									});
								}));

							case 5:
							case 'end':
								return _context.stop();
						}
					}
				}, _callee, this);
			}));

			function getDevices() {
				return _ref.apply(this, arguments);
			}

			return getDevices;
		}()
	}, {
		key: 'getAPDevices',
		value: function () {
			var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
				var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
				    _ref5$timeout = _ref5.timeout,
				    timeout = _ref5$timeout === undefined ? 750 : _ref5$timeout;

				var res, json, device;
				return regeneratorRuntime.wrap(function _callee2$(_context2) {
					while (1) {
						switch (_context2.prev = _context2.next) {
							case 0:
								_context2.prev = 0;
								_context2.next = 3;
								return Promise.race([fetch('http://' + apAddress + '/state', { timeout: timeout }), new Promise(function (resolve, reject) {
									setTimeout(reject, timeout);
								})]);

							case 3:
								res = _context2.sent;

								if (res.ok) {
									_context2.next = 6;
									break;
								}

								throw new Error('unknown_error');

							case 6:
								_context2.next = 8;
								return res.json();

							case 8:
								json = _context2.sent;

								if (!(json.version < minimumVersion)) {
									_context2.next = 11;
									break;
								}

								return _context2.abrupt('return', []);

							case 11:
								device = new Device(json.id, _extends({}, json, {
									type: 'luxio',
									address: '192.168.4.1',
									lastseen: Date.now() / 1000,
									connectivity: 'ap'
								}));
								return _context2.abrupt('return', [device]);

							case 15:
								_context2.prev = 15;
								_context2.t0 = _context2['catch'](0);
								return _context2.abrupt('return', []);

							case 18:
							case 'end':
								return _context2.stop();
						}
					}
				}, _callee2, this, [[0, 15]]);
			}));

			function getAPDevices() {
				return _ref4.apply(this, arguments);
			}

			return getAPDevices;
		}()
	}, {
		key: 'getNupnpDevices',
		value: function () {
			var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
				var res, devices;
				return regeneratorRuntime.wrap(function _callee3$(_context3) {
					while (1) {
						switch (_context3.prev = _context3.next) {
							case 0:
								_context3.next = 2;
								return fetch(nupnpAddress);

							case 2:
								res = _context3.sent;
								_context3.next = 5;
								return res.json();

							case 5:
								devices = _context3.sent;
								return _context3.abrupt('return', Object.keys(devices).filter(function (deviceId) {
									var device = devices[deviceId];
									if (device.version < minimumVersion) return false;
									return true;
								}).map(function (deviceId) {
									var device = devices[deviceId];
									return new Device(deviceId, _extends({}, device, {
										connectivity: 'lan'
									}));
								}));

							case 7:
							case 'end':
								return _context3.stop();
						}
					}
				}, _callee3, this);
			}));

			function getNupnpDevices() {
				return _ref6.apply(this, arguments);
			}

			return getNupnpDevices;
		}()
	}]);

	return Discovery;
}();

module.exports = Discovery;