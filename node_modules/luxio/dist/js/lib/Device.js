'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _require = require('../config'),
    apAddress = _require.apAddress;

var _require2 = require('../util'),
    createGradient = _require2.createGradient,
    getColorTemperature = _require2.getColorTemperature,
    fetch = _require2.fetch;

var Device = function () {
	function Device(id, opts) {
		_classCallCheck(this, Device);

		Object.defineProperty(this, 'id', {
			value: id,
			enumerable: true
		});

		this._opts = {};
		this._state = {};
		this._stateSynced = false;
		this._putQueue = {};

		for (var key in opts) {
			Object.defineProperty(this._opts, key, {
				value: opts[key],
				enumerable: true,
				writable: true
			});
		}
	}

	_createClass(Device, [{
		key: '_fetch',
		value: function () {
			var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(path, opts) {
				return regeneratorRuntime.wrap(function _callee$(_context) {
					while (1) {
						switch (_context.prev = _context.next) {
							case 0:
								return _context.abrupt('return', fetch('http://' + this._opts.address + '/' + path, _extends({
									method: 'GET',
									body: undefined,
									compress: false,
									timeout: 5000
								}, opts)).then(function (res) {
									if (!res.ok) throw new Error(res.statusText || res.status);
									return res;
								}).then(function (res) {
									if (res.status === 200) return res.json();
									return;
								}));

							case 1:
							case 'end':
								return _context.stop();
						}
					}
				}, _callee, this);
			}));

			function _fetch(_x, _x2) {
				return _ref.apply(this, arguments);
			}

			return _fetch;
		}()
	}, {
		key: '_getState',
		value: function () {
			var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
				var _this = this;

				return regeneratorRuntime.wrap(function _callee2$(_context2) {
					while (1) {
						switch (_context2.prev = _context2.next) {
							case 0:
								return _context2.abrupt('return', this._fetch('state', {
									method: 'GET'
								}).then(function (result) {
									_this._stateSynced = true;
									_this._state = result;
								}));

							case 1:
							case 'end':
								return _context2.stop();
						}
					}
				}, _callee2, this);
			}));

			function _getState() {
				return _ref2.apply(this, arguments);
			}

			return _getState;
		}()

		/*
  	Read-only properties
  */

	}, {
		key: 'restart',
		value: function () {
			var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
				return regeneratorRuntime.wrap(function _callee3$(_context3) {
					while (1) {
						switch (_context3.prev = _context3.next) {
							case 0:
								return _context3.abrupt('return', this._fetch('restart', { method: 'PUT' }));

							case 1:
							case 'end':
								return _context3.stop();
						}
					}
				}, _callee3, this);
			}));

			function restart() {
				return _ref3.apply(this, arguments);
			}

			return restart;
		}()
	}, {
		key: 'getWifiNetworks',
		value: function () {
			var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
				return regeneratorRuntime.wrap(function _callee4$(_context4) {
					while (1) {
						switch (_context4.prev = _context4.next) {
							case 0:
								return _context4.abrupt('return', this._fetch('network'));

							case 1:
							case 'end':
								return _context4.stop();
						}
					}
				}, _callee4, this);
			}));

			function getWifiNetworks() {
				return _ref4.apply(this, arguments);
			}

			return getWifiNetworks;
		}()
	}, {
		key: 'setWifiNetwork',
		value: function () {
			var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(_ref5) {
				var ssid = _ref5.ssid,
				    pass = _ref5.pass;
				return regeneratorRuntime.wrap(function _callee5$(_context5) {
					while (1) {
						switch (_context5.prev = _context5.next) {
							case 0:
								return _context5.abrupt('return', this._fetch('network', {
									method: 'PUT',
									body: JSON.stringify({ ssid: ssid, pass: pass })
								}));

							case 1:
							case 'end':
								return _context5.stop();
						}
					}
				}, _callee5, this);
			}));

			function setWifiNetwork(_x3) {
				return _ref6.apply(this, arguments);
			}

			return setWifiNetwork;
		}()
	}, {
		key: 'sync',
		value: function () {
			var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
				var _this2 = this;

				return regeneratorRuntime.wrap(function _callee6$(_context6) {
					while (1) {
						switch (_context6.prev = _context6.next) {
							case 0:
								return _context6.abrupt('return', Promise.all(Object.keys(this._putQueue).map(function (key) {
									var value = _this2._putQueue[key];
									var req = _this2._fetch(key, {
										method: 'PUT',
										body: JSON.stringify(value)
									});
									delete _this2._putQueue[key];
									return req;
								})).then(function () {
									return _this2._getState();
								}).then(function () {
									return _this2;
								}));

							case 1:
							case 'end':
								return _context6.stop();
						}
					}
				}, _callee6, this);
			}));

			function sync() {
				return _ref7.apply(this, arguments);
			}

			return sync;
		}()
	}, {
		key: 'connectivity',
		get: function get() {
			return this.address === apAddress ? 'ap' : 'lan';
		}
	}, {
		key: 'version',
		get: function get() {
			return this._state.version || this._opts.version;
		}
	}, {
		key: 'lastseen',
		get: function get() {
			return this._opts.lastseen;
		}
	}, {
		key: 'address',
		get: function get() {
			return this._opts.address;
		},
		set: function set(value) {
			this._opts.address = value;
		}
	}, {
		key: 'wifiSsid',
		get: function get() {
			return this._opts.wifi_ssid;
		}
	}, {
		key: 'wifi',
		get: function get() {
			if (!this._stateSynced) throw new Error('Device not synced');

			return {
				ssid: this._state.wifi_ssid,
				ip_lan: this._state.wifi_ip_lan,
				ip_ap: this._state.wifi_ip_ap,
				connected: !!this._state.wifi_connected,
				ap: !!this._state.wifi_ap
			};
		}
	}, {
		key: 'mode',
		get: function get() {
			if (!this._stateSynced) throw new Error('Device not synced');

			return this._state.mode;
		}

		/*
  	Read-Write properties
  */

	}, {
		key: 'name',
		get: function get() {
			return this._state.name || this._opts.name;
		},
		set: function set(value) {
			if (typeof value !== 'string') throw new Error('Invalid type for name, expected: String');

			this._putQueue['name'] = { value: value };
			this._state.name = value;
		}
	}, {
		key: 'pixels',
		get: function get() {
			return this._state.pixels || this._opts.pixels;
		},
		set: function set(value) {
			if (typeof value !== 'number') throw new Error('Invalid type for pixels, expected: Number');

			this._putQueue['pixels'] = { value: value };
			this._state.pixels = value;
		}
	}, {
		key: 'on',
		get: function get() {
			if (typeof this._state.on === 'undefined') throw new Error('Device not synced');

			return this._state.on;
		},
		set: function set(value) {
			if (typeof value !== 'boolean') throw new Error('Invalid type for on, expected: Boolean');

			this._putQueue['on'] = { value: value };
			this._state.on = value;
		}
	}, {
		key: 'brightness',
		get: function get() {
			if (!this._stateSynced) throw new Error('Device not synced');

			return this._state.brightness;
		},
		set: function set(value) {
			if (typeof value !== 'number') throw new Error('Invalid type for brightness, expected: Number');

			this._putQueue['brightness'] = { value: value };
			this._state.brightness = value;
		}
	}, {
		key: 'effect',
		get: function get() {
			if (!this._stateSynced) throw new Error('Device not synced');

			return this._state.effect;
		},
		set: function set(value) {
			if (typeof value !== 'string') throw new Error('Invalid type for brightness, expected: String');

			if (!this._state.effects.includes(value)) throw new Error('Invalid effect: ' + value);

			this._putQueue['effect'] = { value: value };
			this._state.effect = value;
		}
	}, {
		key: 'gradient',
		get: function get() {
			if (!this._stateSynced) throw new Error('Device not synced');

			if (this._state.gradient_source === null) return null;

			var colors = this._state.gradient_source.map(function (color) {
				if (color.charAt(0) !== '#') return '#' + color;
				return color;
			});

			if (colors.length === 1) return colors.concat(colors[0]);
			return colors;
		},
		set: function set(value) {
			if (!Array.isArray(value)) throw new Error('Invalid type for gradient, expected: Array');

			var gradientSource = value.map(function (color) {
				if (color.charAt(0) === '#') return color.substring(1);
				return color;
			});
			var gradientPixels = createGradient({
				source: gradientSource,
				pixels: this.pixels
			});

			this._putQueue['gradient'] = {
				source: gradientSource,
				pixels: gradientPixels
			};
			this._state.gradient_source = gradientSource;
			this._state.gradient_pixels = gradientPixels;
		}
	}, {
		key: 'color',
		set: function set(value) {
			this.gradient = [value];
		}
	}, {
		key: 'colorTemperature',
		set: function set(value) {
			var color = getColorTemperature(value);
			this.color = color;
		}
	}]);

	return Device;
}();

module.exports = Device;